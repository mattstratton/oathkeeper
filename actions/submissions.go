package actions

import (
	"github.com/gobuffalo/buffalo"
	"github.com/markbates/pop"
	"github.com/mattstratton/oathkeeper/models"
	"github.com/pkg/errors"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Submission)
// DB Table: Plural (submissions)
// Resource: Plural (Submissions)
// Path: Plural (/submissions)
// View Template Folder: Plural (/templates/submissions/)

// SubmissionsResource is the resource for the Submission model
type SubmissionsResource struct {
	buffalo.Resource
}

// List gets all Submissions. This function is mapped to the path
// GET /submissions
func (v SubmissionsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	submissions := &models.Submissions{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Submissions from the DB
	if err := q.All(submissions); err != nil {
		return errors.WithStack(err)
	}

	// Make Submissions available inside the html template
	c.Set("submissions", submissions)

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	return c.Render(200, r.HTML("submissions/index.html"))
}

// Show gets the data for one Submission. This function is mapped to
// the path GET /submissions/{submission_id}
func (v SubmissionsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Submission
	submission := &models.Submission{}

	// To find the Submission the parameter submission_id is used.
	if err := tx.Find(submission, c.Param("submission_id")); err != nil {
		return c.Error(404, err)
	}

	// Make submission available inside the html template
	c.Set("submission", submission)

	return c.Render(200, r.HTML("submissions/show.html"))
}

// New renders the form for creating a new Submission.
// This function is mapped to the path GET /submissions/new
func (v SubmissionsResource) New(c buffalo.Context) error {
	// Make submission available inside the html template
	c.Set("submission", &models.Submission{})

	return c.Render(200, r.HTML("submissions/new.html"))
}

// Create adds a Submission to the DB. This function is mapped to the
// path POST /submissions
func (v SubmissionsResource) Create(c buffalo.Context) error {
	// Allocate an empty Submission
	submission := &models.Submission{}

	// Bind submission to the html form elements
	if err := c.Bind(submission); err != nil {
		return errors.WithStack(err)
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(submission)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make submission available inside the html template
		c.Set("submission", submission)

		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("submissions/new.html"))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Submission was created successfully")

	// and redirect to the submissions index page
	return c.Redirect(302, "/submissions/%s", submission.ID)
}

// Edit renders a edit form for a Submission. This function is
// mapped to the path GET /submissions/{submission_id}/edit
func (v SubmissionsResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Submission
	submission := &models.Submission{}

	if err := tx.Find(submission, c.Param("submission_id")); err != nil {
		return c.Error(404, err)
	}

	// Make submission available inside the html template
	c.Set("submission", submission)
	return c.Render(200, r.HTML("submissions/edit.html"))
}

// Update changes a Submission in the DB. This function is mapped to
// the path PUT /submissions/{submission_id}
func (v SubmissionsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Submission
	submission := &models.Submission{}

	if err := tx.Find(submission, c.Param("submission_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind Submission to the html form elements
	if err := c.Bind(submission); err != nil {
		return errors.WithStack(err)
	}

	verrs, err := tx.ValidateAndUpdate(submission)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make submission available inside the html template
		c.Set("submission", submission)

		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("submissions/edit.html"))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Submission was updated successfully")

	// and redirect to the submissions index page
	return c.Redirect(302, "/submissions/%s", submission.ID)
}

// Destroy deletes a Submission from the DB. This function is mapped
// to the path DELETE /submissions/{submission_id}
func (v SubmissionsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Submission
	submission := &models.Submission{}

	// To find the Submission the parameter submission_id is used.
	if err := tx.Find(submission, c.Param("submission_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(submission); err != nil {
		return errors.WithStack(err)
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", "Submission was destroyed successfully")

	// Redirect to the submissions index page
	return c.Redirect(302, "/submissions")
}
